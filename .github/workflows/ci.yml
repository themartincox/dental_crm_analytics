name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  security-events: write
  pull-requests: write

jobs:
  security-scan:
    name: Security & Quality Checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint with security rules
        run: npm run lint -- --format json --output-file eslint-results.json
        continue-on-error: true

      - name: Run npm audit
        run: npm audit --audit-level high --json > audit-results.json
        continue-on-error: true

      - name: Run accessibility checks
        run: npm run test:a11y
        continue-on-error: true

      - name: Build application
        run: npm run build
        env:
          CI: true

      - name: Upload security scan results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-scan-results
          path: |
            eslint-results.json
            audit-results.json

  test:
    name: Unit & Integration Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests
        run: npm run test:coverage
        env:
          CI: true

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage/

  quality-gate:
    name: Quality Gate
    runs-on: ubuntu-latest
    needs: [security-scan, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download security scan results
        uses: actions/download-artifact@v4
        with:
          name: security-scan-results

      - name: Download coverage report
        uses: actions/download-artifact@v4
        with:
          name: coverage-report

      - name: Quality Gate Check
        run: |
          echo "Checking quality gates..."
          
          # Check if high/critical vulnerabilities exist
          if [ -f audit-results.json ]; then
            HIGH_VULNS=$(jq '.metadata.vulnerabilities.high + .metadata.vulnerabilities.critical' audit-results.json)
            if [ "$HIGH_VULNS" -gt 0 ]; then
              echo "❌ High/Critical vulnerabilities found: $HIGH_VULNS"
              exit 1
            fi
          fi
          
          # Check ESLint errors
          if [ -f eslint-results.json ]; then
            ERRORS=$(jq '[.[] | .errorCount] | add' eslint-results.json)
            if [ "$ERRORS" -gt 0 ]; then
              echo "❌ ESLint errors found: $ERRORS"
              exit 1
            fi
          fi
          
          echo "✅ Quality gates passed"